{"version":3,"sources":["bootstrap.js","utils/textEncoder.ts","env.ts","utils/webrtc.ts","components/White.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["encode","data","dataStr","JSON","stringify","TextEncoder","decode","arr","TextDecoder","parse","decodeMessage","e","arrayBuffer","then","URLWs","websocket","log","console","bind","RTC","_EventTarget","_this","options","arguments","length","undefined","channel","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","uid","webSocket","rtcConnMaps","Map","dataChannelMaps","userlist","inherits","createClass","key","value","_init","asyncToGenerator","regenerator_default","a","mark","_callee","joinChannel","wrap","_context","prev","next","createWebSocket","sent","kind","sendMessage","stop","apply","_this2","WebSocket","addEventListener","dispatchEvent","CloseEvent","code","reason","_ref","_callee2","msg","target","remote","connPeer","dataChannel","_context2","t0","abrupt","createRTCPeerConn","createDataChannel","String","createOffer","createRTCDataChannel","receiveCreateAnswer","receiveCreateOffer","receiveNewICECandidate","closeRTCCall","get","_x","Promise","resolve","reject","_this3","conn","RTCPeerConnection","iceServers","urls","candidate","iceConnectionState","iceGatheringState","signalingState","event","Number","label","set","_this4","logCurrentState","readyState","eventMessage","CustomEvent","detail","_createOffer","_callee3","offer","_context3","setLocalDescription","sdp","localDescription","_x2","send","peerConnection","ontrack","onicecandidate","oniceconnectionstatechange","onsignalingstatechange","onicegatheringstatechange","onnegotiationneeded","getTransceivers","forEach","transceiver","close","_receiveCreateOffer","_callee4","desc","response","_context4","RTCSessionDescription","all","type","setRemoteDescription","catch","error","createAnswer","t1","_x3","_x4","_receiveCreateAnswer","_callee5","_context5","_x5","_x6","_receiveNewICECandidate","_callee6","_context6","RTCIceCandidate","addIceCandidate","_x7","_x8","err","wrapNativeSuper","EventTarget","useStyles","makeStyles","theme","root","width","height","display","touchAction","speedDial","position","bottom","spacing","right","event2Point","point","x","y","changedTouches","clientX","clientY","drawing","White","props","classes","cvsRef","useRef","colorRef","_useState","useState","_useState2","slicedToArray","dialOpen","setDialOpen","drawsRef","colorInputRef","connRef","setCurrentPoint","p","rect","current","getBoundingClientRect","Math","round","left","top","points","push","ctx","draw","strokeStyle","color","lineWidth","beginPath","moveTo","line","lineTo","stroke","drawLineHandler","getContext","sendPointMsg","_objectSpread","drawLine","startHandler","moveHandler","stopHandler","moveHandlerThrottle","throttle","start","move","stopPropagation","actions","icon","react_default","createElement","Save_default","name","InvertColors_default","hanler","click","useEffect","datachannelmessage","decodeMsg","handler","_ref2","init","window","removeEventListener","handleClose","className","ref","onMouseDown","onMouseMove","onMouseUp","onTouchStart","onTouchMove","onTouchEnd","SpeedDial","ariaLabel","SpeedDialIcon","onClick","o","onBlur","onClose","onFocus","onMouseEnter","onMouseLeave","open","map","action","SpeedDialAction","tooltipTitle","hidden","onChange","colorValue","App","Fragment","CssBaseline","components_White","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","concat","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0335f8f5.chunk.js","sourcesContent":["\r\nif (process.env.NODE_ENV === 'development' && navigator.userAgent.match (/ Android/i)) {\r\n  // import('vconsole').then(module=> new module.default())\r\n}\r\n\r\n// fix react typesript isolatedMoudles is true\r\nexport const noop = () => {}","import {Message} from './message'\r\n\r\n\r\nconst encoding = 'utf-8';\r\n\r\nexport const encode = (data: Message) => {\r\n  const dataStr = JSON.stringify(data);\r\n  return new TextEncoder().encode(dataStr);\r\n}\r\n\r\nexport const decode = (arr: Uint8Array): Message => {\r\n  const dataStr = new TextDecoder().decode(arr)\r\n  return JSON.parse(dataStr)\r\n}\r\n\r\nexport const decodeMessage = (e: MessageEvent): Promise<Message> => e.data.arrayBuffer().then(decode)\r\n","import config from 'config/config.json'\r\n\r\ndeclare var process : {\r\n  env :{\r\n    NODE_ENV: 'development' | 'production'\r\n  }\r\n}\r\n\r\ninterface ConfigEnv {\r\n  websocket: string,\r\n}\r\n\r\nexport const configEnv: ConfigEnv = config[process.env.NODE_ENV]\r\n\r\nexport const isDev = process.env.NODE_ENV === 'development'\r\n\r\nexport const URLWs = configEnv.websocket","import { URLWs } from '../env'\r\nimport { Message, sendMessage } from './message'\r\nimport { encode, decode, decodeMessage } from './textEncoder'\r\n\r\nconst log = console.log.bind(console, '%c[[WebRTC]]: ', 'color: red')\r\n\r\ninterface Options {\r\n  channel: string,\r\n  uid?: number\r\n}\r\n\r\nexport class RTC extends EventTarget {\r\n  options :Options\r\n  uid = 0\r\n  webSocket: WebSocket | undefined\r\n  rtcConnMaps = new Map<number,RTCPeerConnection>()\r\n  dataChannelMaps = new Map<number,RTCDataChannel>()\r\n\r\n  userlist: any\r\n\r\n  constructor (options:Options = {channel:'testChannel'}) {\r\n    super();\r\n    this.options = options\r\n  }\r\n\r\n  async init() {\r\n    this.webSocket = await this.createWebSocket()\r\n    const joinChannel: Message = {\r\n      kind: 'join',\r\n      uid: this.uid,\r\n      value: {\r\n        channel: this.options.channel\r\n      }\r\n    };\r\n  \r\n    this.sendMessage(joinChannel)\r\n  }\r\n\r\n  private createWebSocket(){\r\n    const webSocket = new WebSocket(URLWs)\r\n    webSocket.addEventListener('close', e => {\r\n      log('websocket closed')\r\n      this.dispatchEvent(new CloseEvent('websocketclosed', {\r\n        code: e.code, \r\n        reason: e.reason\r\n      }))\r\n    })\r\n    webSocket.addEventListener('message', async e => {\r\n      const msg = await decodeMessage(e)\r\n      log('received websocket message: ', msg)\r\n      this.dispatchEvent(e)\r\n      const {kind, value, uid, target} = msg\r\n      switch (kind) {\r\n        case 'join-success':\r\n          this.uid = target || 0\r\n          break\r\n        case 'userlist':      // Received an updated user list\r\n          this.userlist = value\r\n          break;\r\n        // local message\r\n        case 'user-joined':\r\n          const remote = uid\r\n          const connPeer = this.createRTCPeerConn(remote)\r\n          const dataChannel = connPeer.createDataChannel(String(this.uid))\r\n          this.createOffer(remote) // local\r\n          this.createRTCDataChannel(remote, dataChannel)\r\n          break\r\n        case 'create-answer':\r\n          this.receiveCreateAnswer(uid, value) // remote\r\n          break;\r\n\r\n        // remote message\r\n        case 'create-offer':\r\n          this.receiveCreateOffer(uid, value) // local remote\r\n          break;\r\n\r\n        case 'new-ice-candidate': // A new ICE candidate has been received\r\n          this.receiveNewICECandidate(uid, value);\r\n          break;\r\n        case 'hang-up':\r\n          this.closeRTCCall(this.rtcConnMaps.get(uid) as RTCPeerConnection)\r\n          break;\r\n        default:\r\n          log('receive: Unknown message')\r\n      }\r\n    })\r\n    return new Promise<WebSocket>((resolve, reject) => {\r\n      webSocket.addEventListener('open', (e)=>{\r\n        resolve(webSocket)\r\n      })\r\n      webSocket.addEventListener('error', (e)=>{\r\n        reject(e)\r\n      })\r\n    })\r\n  }\r\n  private createRTCPeerConn(target: number) {\r\n    const conn = new RTCPeerConnection({\r\n      // Information about ICE servers - Use your own!\r\n      iceServers: [{\r\n          urls: [\r\n            'stun:stun1.l.google.com:19302',\r\n            'stun:stun2.l.google.com:19302',\r\n            'stun:stun3.l.google.com:19302',\r\n            'stun:stun4.l.google.com:19302',\r\n            'stun:23.21.150.121',\r\n            'stun:stun01.sipphone.com',\r\n            'stun:stun.ekiga.net',\r\n            'stun:stun.fwdnet.net',\r\n            'stun:stun.ideasip.com',\r\n            'stun:stun.iptel.org',\r\n            'stun:stun.rixtelecom.se',\r\n            'stun:stun.schlund.de',\r\n            'stun:stunserver.org',\r\n            'stun:stun.softjoys.com',\r\n            'stun:stun.voiparound.com',\r\n            'stun:stun.voipbuster.com',\r\n            'stun:stun.voipstunt.com',\r\n            'stun:stun.voxgratia.org',\r\n            'stun:stun.xten.com',\r\n          ]\r\n        }]\r\n    });\r\n    conn.addEventListener('icecandidate', e => {\r\n      if (e.candidate) {\r\n        log(\"*** Outgoing ICE candidate: \" + e.candidate.candidate);\r\n        const msg: Message = {\r\n          kind: 'new-ice-candidate',\r\n          uid: this.uid,\r\n          target,\r\n          value: {\r\n            candidate: e.candidate\r\n          }\r\n        }\r\n        this.sendMessage(msg)\r\n      }\r\n    })\r\n    conn.addEventListener('iceconnectionstatechange', () => {\r\n      log(\"*** ICE connection state changed to \" + conn.iceConnectionState);\r\n      switch(conn.iceConnectionState) {\r\n        case \"closed\":\r\n        case \"failed\":\r\n        case \"disconnected\":\r\n          this.closeRTCCall(conn);\r\n          break;\r\n      }\r\n    })\r\n    conn.addEventListener('icegatheringstatechange', () => {\r\n      log(\"*** ICE gathering state changed to: \" + conn.iceGatheringState);\r\n    })\r\n    conn.addEventListener('signalingstatechange', () => {\r\n      log(\"*** WebRTC signaling state changed to: \" + conn.signalingState);\r\n      switch(conn.signalingState) {\r\n        case \"closed\":\r\n          this.closeRTCCall(conn);\r\n          break;\r\n      }\r\n    })\r\n    conn.addEventListener('negotiationneeded', () => {\r\n      this.createOffer(target)\r\n    })\r\n    conn.addEventListener('datachannel', event => {\r\n      const dataChannel = event.channel\r\n      this.createRTCDataChannel(Number(dataChannel.label), event.channel)\r\n    })\r\n\r\n    this.rtcConnMaps.set(target, conn)\r\n\r\n    return conn\r\n  }\r\n\r\n  private createRTCDataChannel(target: number, channel: RTCDataChannel) {\r\n    const logCurrentState = () => {\r\n      console.log('current data channel state: ', channel.readyState)\r\n    }\r\n    channel.addEventListener('open', logCurrentState)\r\n    channel.addEventListener('close', logCurrentState)\r\n    channel.addEventListener('message', eventMessage => {\r\n      // this.dispatchEvent(eventMessage)\r\n      this.dispatchEvent(new CustomEvent('datachannelmessage', {detail: eventMessage}))\r\n    })\r\n    this.dataChannelMaps.set(target,channel)\r\n    return channel\r\n  }\r\n\r\n  private async createOffer(target: number) {\r\n    let conn = this.rtcConnMaps.get(target)\r\n    if (!conn) {\r\n      conn = this.createRTCPeerConn(target)\r\n    }\r\n    log('Creating offer')\r\n    const offer = await conn.createOffer();\r\n    if (conn.signalingState != \"stable\") {\r\n      log(\"     -- The connection isn't stable yet; postponing...\")\r\n      return;\r\n    }\r\n    log(\"---> Setting local description to the offer\");\r\n    await conn.setLocalDescription(offer);\r\n    log(\"---> Sending the offer to the remote peer\");\r\n\r\n    const msg: Message = {\r\n      kind: 'create-offer',\r\n      uid: this.uid,\r\n      target,\r\n      value: {\r\n        sdp: conn.localDescription\r\n      }\r\n    }\r\n    this.sendMessage(msg)\r\n  }\r\n\r\n  sendMessage(msg: Message) {\r\n    if (this.webSocket) {\r\n      this.webSocket.send(encode(msg))\r\n    }\r\n  }\r\n  private closeRTCCall (peerConnection: RTCPeerConnection){\r\n    if (!peerConnection) return\r\n    // Close the RTCPeerConnection\r\n    log(\"--> Closing the peer connection\");\r\n    // Disconnect all our event listeners; we don't want stray events\r\n    // to interfere with the hangup while it's ongoing.\r\n    peerConnection.ontrack = null;\r\n    peerConnection.onicecandidate = null;\r\n    peerConnection.oniceconnectionstatechange = null;\r\n    peerConnection.onsignalingstatechange = null;\r\n    peerConnection.onicegatheringstatechange = null;\r\n    peerConnection.onnegotiationneeded = null;\r\n\r\n    // Stop all transceivers on the connection\r\n    peerConnection.getTransceivers().forEach(transceiver => {\r\n      transceiver.stop();\r\n    });\r\n\r\n    // Stop the webcam preview as well by pausing the <video>\r\n    // element, then stopping each of the getUserMedia() tracks\r\n    // on it.\r\n\r\n    // if (localVideo.srcObject) {\r\n    //   localVideo.pause();\r\n    //   (localVideo.srcObject as MediaStream ).getTracks().forEach(track => {\r\n    //     track.stop();\r\n    //   });\r\n    // }\r\n\r\n    // Close the peer connection\r\n\r\n    peerConnection.close();\r\n  }\r\n\r\n  private async receiveCreateOffer(target: number, msg: any){\r\n    let connPeer = this.rtcConnMaps.get(target)\r\n    // If we're not already connected, create an RTCPeerConnection\r\n    // to be linked to the caller.\r\n    if (!connPeer) {\r\n      connPeer = this.createRTCPeerConn(target)\r\n    }\r\n    log(\"Received video chat offer from \" + target);\r\n  \r\n    // We need to set the remote description to the received SDP offer\r\n    // so that our local WebRTC layer knows how to talk to the caller.\r\n\r\n    var desc = new RTCSessionDescription(msg.sdp);\r\n  \r\n    // If the connection isn't stable yet, wait for it...\r\n  \r\n    if (connPeer.signalingState != \"stable\") {\r\n      log(\"  - But the signaling state isn't stable, so triggering rollback\");\r\n  \r\n      // Set the local and remove descriptions for rollback; don't proceed\r\n      // until both return.\r\n      await Promise.all([\r\n        connPeer.setLocalDescription({type: \"rollback\"}),\r\n        connPeer.setRemoteDescription(desc)\r\n      ]).catch(error => log('setLocalDescription error: ', error));\r\n      return\r\n    } else {\r\n      log (\"  - Setting remote description\");\r\n      await connPeer.setRemoteDescription(desc);\r\n    }\r\n  \r\n    log(\"---> Creating and sending answer to caller\");\r\n  \r\n    await connPeer.setLocalDescription(await connPeer.createAnswer());\r\n    const response = {\r\n      kind: 'create-answer',\r\n      uid: this.uid,\r\n      target,\r\n      value: {\r\n        sdp: connPeer.localDescription\r\n      }\r\n    }\r\n    this.sendMessage(response)\r\n  }\r\n  async receiveCreateAnswer(target: number, msg: any) {\r\n    log(\"*** Call recipient has accepted our call\");\r\n  \r\n    // Configure the remote description, which is the SDP payload\r\n    // in our \"video-answer\" message.\r\n  \r\n    var desc = new RTCSessionDescription(msg.sdp);\r\n    await (this.rtcConnMaps.get(target) as RTCPeerConnection).setRemoteDescription(desc)\r\n  }\r\n\r\n  async receiveNewICECandidate(target: number, msg: any) {\r\n    var candidate = new RTCIceCandidate(msg.candidate);\r\n  \r\n    log(\"*** Adding received ICE candidate: \" + JSON.stringify(candidate));\r\n    await (this.rtcConnMaps.get(target) as RTCPeerConnection).addIceCandidate(candidate)\r\n  }\r\n  handleClose() {\r\n    if (this.webSocket) {\r\n      this.webSocket.close()\r\n    }\r\n    this.rtcConnMaps.forEach(connPeer => connPeer.close())\r\n    this.dataChannelMaps.forEach(dataChannel => dataChannel.close())\r\n  }\r\n  dataChannelsSend(msg: Message) {\r\n    const data = encode(msg)\r\n    this.dataChannelMaps.forEach( dataChannel => {\r\n      try{\r\n        dataChannel.send(data)\r\n      }catch(err) {\r\n        console.log('send data channel message failed: ', err)\r\n      }\r\n    })\r\n  }\r\n}","import React, {\r\n  useRef,\r\n  useCallback,\r\n  useState,\r\n  useEffect,\r\n  MouseEvent,\r\n  TouchEvent,\r\n  Touch\r\n} from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport throttle from \"lodash/throttle\";\r\nimport SpeedDial from \"@material-ui/lab/SpeedDial\";\r\nimport SpeedDialIcon from \"@material-ui/lab/SpeedDialIcon\";\r\nimport SpeedDialAction from \"@material-ui/lab/SpeedDialAction\";\r\nimport InvertColors from \"@material-ui/icons/InvertColors\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n\r\nimport { connect, Connection } from '../utils/rtc'\r\nimport { Message } from '../utils/message'\r\nimport { decode, decodeMessage } from '../utils/textEncoder'\r\nimport { RTC } from '../utils/webrtc'\r\n\r\n// TODO: remove this\r\ndeclare global {\r\n  interface Window {\r\n    conn: any\r\n  }\r\n}\r\n\r\nconst canvasWidth = 1080 * 3;\r\nconst canvasHeight = 1080 * 3;\r\n\r\ninterface WhiteProps {}\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: \"100%\",\r\n    height: \"100vh\",\r\n    display: \"block\",\r\n    touchAction: \"none\"\r\n  },\r\n  speedDial: {\r\n    position: \"absolute\",\r\n    bottom: theme.spacing(2),\r\n    right: theme.spacing(3)\r\n  }\r\n}));\r\n\r\ninterface DrawPoint {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ntype CtxStyle = string | CanvasGradient | CanvasPattern;\r\ninterface Draw {\r\n  color: CtxStyle;\r\n  points: DrawPoint[];\r\n}\r\ntype Draws = Draw[];\r\n\r\nconst event2Point = (event: MouseEvent | TouchEvent): DrawPoint => {\r\n  const point = {\r\n    x: 0,\r\n    y: 0\r\n  };\r\n  let value: Touch | MouseEvent;\r\n  switch (event.type) {\r\n    case \"touchstart\":\r\n    case \"touchmove\":\r\n    case \"touchend\":\r\n      value = (event as TouchEvent).changedTouches[0];\r\n      break;\r\n    case \"mousedown\":\r\n    case \"mousemove\":\r\n    case \"mouseup\":\r\n      value = event as MouseEvent;\r\n      break;\r\n    default:\r\n      value = event as MouseEvent;\r\n      break;\r\n  }\r\n\r\n  point.x = value.clientX;\r\n  point.y = value.clientY;\r\n  return point;\r\n};\r\nlet drawing = false;\r\nconst draw = (\r\n  startHandler: (p: DrawPoint) => void,\r\n  moveHandler: (p: DrawPoint) => void,\r\n  stopHandler: (p: DrawPoint) => void = ()=>{}\r\n) => {\r\n  const moveHandlerThrottle = throttle(moveHandler, 16);\r\n\r\n  const start = (event: MouseEvent | TouchEvent) => {\r\n    drawing = true;\r\n    startHandler(event2Point(event));\r\n  };\r\n  const move = (event: MouseEvent | TouchEvent) => {\r\n    if (drawing) {\r\n      event.stopPropagation();\r\n      moveHandlerThrottle(event2Point(event));\r\n    }\r\n  };\r\n  const stop = (event: MouseEvent | TouchEvent) => {\r\n    drawing = false;\r\n    stopHandler(event2Point(event));\r\n  };\r\n  return { start, move, stop };\r\n};\r\n\r\nconst drawLineHandler = (ctx: CanvasRenderingContext2D, draw: Draw) => {\r\n  ctx.strokeStyle = draw.color;\r\n  ctx.lineWidth = 15;\r\n  ctx.beginPath();\r\n  ctx.moveTo(draw.points[0].x, draw.points[0].y);\r\n  draw.points.forEach(line => {\r\n    ctx.lineTo(line.x, line.y);\r\n  });\r\n  ctx.stroke();\r\n};\r\n\r\nconst White: React.FC<WhiteProps> = props => {\r\n  const classes = useStyles();\r\n  console.log(\"run function components\");\r\n\r\n  const cvsRef = useRef<HTMLCanvasElement >(null)\r\n  const colorRef = useRef<CtxStyle>(\"\");\r\n  const [dialOpen, setDialOpen] = useState<boolean>(false);\r\n  const drawsRef = useRef<Draws>([]);\r\n  const colorInputRef = useRef<HTMLInputElement>(null);\r\n  const connRef = useRef<RTC>()\r\n\r\n\r\n  // useEffect(() => {\r\n  //   console.log('useEffect')\r\n  //   const ctx = ctxRef.current as CanvasRenderingContext2D;\r\n  //   ctx.clearRect(0,0,canvasWidth, canvasHeight)\r\n  //   drawsRef.current.forEach(drawHandler)\r\n  // });\r\n\r\n  const setCurrentPoint = (p: DrawPoint) => {\r\n    const rect = (cvsRef.current as HTMLCanvasElement).getBoundingClientRect()\r\n    const current = drawsRef.current[drawsRef.current.length - 1];\r\n    const point: DrawPoint = {\r\n      x: Math.round(((p.x - rect.left) * canvasWidth) / rect.width),\r\n      y: Math.round(((p.y - rect.top) * canvasHeight) / rect.height)\r\n    };\r\n    current.points.push(point);\r\n    const ctx = (cvsRef.current as HTMLCanvasElement).getContext(\"2d\") as CanvasRenderingContext2D;\r\n    drawLineHandler(ctx, current);\r\n  };\r\n\r\n  const sendPointMsg = (data: any) => {\r\n    const conn = connRef.current\r\n    if(conn) {\r\n      const msg = {\r\n        ...data,\r\n        uid: conn.uid,\r\n       }\r\n      conn.sendMessage(msg)\r\n    }\r\n  }\r\n\r\n  const drawLine = draw(\r\n    point => {\r\n      drawsRef.current.push({ color: colorRef.current, points: [] });\r\n      setCurrentPoint(point);\r\n      sendPointMsg({kind: 'pointStart', value: point})\r\n    },\r\n    point => {\r\n      setCurrentPoint(point);\r\n      sendPointMsg({kind: 'pointMove', value: point})\r\n    }\r\n  );\r\n\r\n  const colorChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const colorValue = event.target.value\r\n    colorRef.current = colorValue\r\n    sendPointMsg({kind: 'colorChange', value: colorValue})\r\n  }\r\n\r\n  const actions = [\r\n    { icon: <SaveIcon />, name: \"Save\" },\r\n    // { icon: <PrintIcon />, name: \"Print\" },\r\n    // { icon: <ShareIcon />, name: \"Share\" },\r\n    // { icon: <DeleteIcon />, name: \"Delete\" },\r\n    {\r\n      icon: <InvertColors />, \r\n      name: \"color\",\r\n      hanler() {\r\n        (colorInputRef.current as HTMLInputElement).click()\r\n        setDialOpen(false)\r\n      }\r\n    }\r\n  ];\r\n\r\n  // web rtc\r\n  useEffect(()=>{\r\n    const datachannelmessage = (event: Event) => {\r\n      const handler = async () => {\r\n        const decodeMsg = await decodeMessage(event as MessageEvent)\r\n\r\n        // const dataMsg = ((event as CustomEvent).detail as MessageEvent)\r\n        // const decodeMsg = decode(dataMsg.data as Uint8Array)\r\n        console.log(decodeMsg)\r\n        switch(decodeMsg.kind) {\r\n          case 'pointStart':\r\n            drawsRef.current.push({ color: colorRef.current, points: [] });\r\n            setCurrentPoint(decodeMsg.value);\r\n            break;\r\n          case 'pointMove':\r\n            setCurrentPoint(decodeMsg.value);\r\n            break;\r\n          case 'colorChange':\r\n            colorRef.current = decodeMsg.value\r\n            break;\r\n        }\r\n      }\r\n      handler()\r\n      \r\n    }\r\n    const init = async () => {\r\n      const conn = new RTC();\r\n      await conn.init();\r\n      (window.conn as any) = connRef.current = conn // TODO: remove this\r\n      conn.addEventListener('message', datachannelmessage)\r\n    }\r\n    init()\r\n    return () => {\r\n      const conn = connRef.current\r\n      if (conn) {\r\n        conn.removeEventListener('message', datachannelmessage)\r\n        conn.handleClose()\r\n      }\r\n    }\r\n  },[])\r\n\r\n  return (\r\n    <div>\r\n      <canvas\r\n        className={classes.root}\r\n        ref={cvsRef}\r\n        height={canvasHeight}\r\n        width={canvasWidth}\r\n        onMouseDown={drawLine.start}\r\n        onMouseMove={drawLine.move}\r\n        onMouseUp={drawLine.stop}\r\n        onTouchStart={drawLine.start}\r\n        onTouchMove={drawLine.move}\r\n        onTouchEnd={drawLine.stop}\r\n        // onPointerDown={drawLine.start}\r\n        // onPointerMove={drawLine.move}\r\n        // onPointerUp={drawLine.stop}\r\n      />\r\n      <SpeedDial\r\n        ariaLabel=\"SpeedDial\"\r\n        className={classes.speedDial}\r\n        // hidden={dialOpen}\r\n        icon={<SpeedDialIcon />}\r\n        onClick={() => setDialOpen(o=>!o)}\r\n        onBlur={() => setDialOpen(false)}\r\n        onClose={() => setDialOpen(false)}\r\n        onFocus={() => setDialOpen(true)}\r\n        onMouseEnter={() => setDialOpen(true)}\r\n        onMouseLeave={() => setDialOpen(false)}\r\n        open={dialOpen}\r\n        // direction={direction}\r\n      >\r\n        {actions.map(action => (\r\n          <SpeedDialAction\r\n            key={action.name}\r\n            icon={action.icon}\r\n            tooltipTitle={action.name}\r\n            onClick={action.hanler || console.log}\r\n          />\r\n        ))}\r\n      </SpeedDial>\r\n      <input\r\n        ref={colorInputRef}\r\n        type=\"color\"\r\n        hidden\r\n        onChange={colorChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default White;\r\n","import React from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n// import 'normalize.css';\r\nimport 'webrtc-adapter';\r\nimport './App.css';\r\nimport White from './components/White';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <div className=\"App\">\r\n        <White />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import './bootstrap';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { isDev } from './env'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\nconst serviceConfig = {\r\n  onSuccess: (registration: ServiceWorkerRegistration)=> {\r\n    console.log('onSuccess', registration)\r\n  },\r\n  onUpdate: (registration: ServiceWorkerRegistration) => {\r\n    console.log('onUpdate', registration)\r\n  }\r\n}\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nif (isDev) {\r\n  serviceWorker.unregister();\r\n} else {\r\n  serviceWorker.register(serviceConfig);\r\n  navigator.serviceWorker.ready.then(registration=> {\r\n    // registration.addEventListener()\r\n    console.log(registration)\r\n  })\r\n}"],"sourceRoot":""}