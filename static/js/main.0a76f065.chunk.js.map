{"version":3,"sources":["bootstrap.js","components/White.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","root","width","height","display","touchAction","speedDial","position","bottom","spacing","right","event2Point","event","value","point","x","y","type","changedTouches","clientX","clientY","drawing","White","props","classes","console","log","startHandler","moveHandler","stopHandler","_useCanvasCtx","_useState","useState","_useState2","Object","slicedToArray","rect","setRect","ctxRef","useRef","useCallback","canvas","getBoundingClientRect","current","getContext","useCanvasCtx","_useCanvasCtx2","ref","_useState3","_useState4","style","setStyle","_useState5","_useState6","dialOpen","setDialOpen","drawsRef","colorRef","drawHandler","line","ctx","draw","strokeStyle","lineWidth","beginPath","moveTo","points","forEach","lineTo","stroke","drawLineHandler","moveHandlerThrottle","throttle","p","length","Math","round","left","top","push","setCurrentPoint","drawLine","start","move","stopPropagation","stop","actions","icon","react_default","a","createElement","InvertColors_default","name","hanler","click","className","onMouseDown","onMouseMove","onMouseUp","onTouchStart","onTouchMove","onTouchEnd","SpeedDial","ariaLabel","SpeedDialIcon","onClick","o","onBlur","onClose","onFocus","onMouseEnter","onMouseLeave","open","map","action","SpeedDialAction","key","tooltipTitle","hidden","onChange","e","target","App","Fragment","CssBaseline","components_White","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0a76f065.chunk.js","sourcesContent":["\r\nif (process.env.NODE_ENV === 'development' && navigator.userAgent.match (/ Android/i)) {\r\n  import('vconsole').then(module=> new module.default())\r\n}\r\n\r\n// fix react typesript isolatedMoudles is true\r\nexport const noop = () => {}","import React, {\r\n  useRef,\r\n  useCallback,\r\n  useState,\r\n  useEffect,\r\n  MouseEvent,\r\n  TouchEvent,\r\n  Touch\r\n} from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport throttle from \"lodash/throttle\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport { capitalize } from \"@material-ui/core/utils\";\r\nimport SpeedDial from \"@material-ui/lab/SpeedDial\";\r\nimport SpeedDialIcon from \"@material-ui/lab/SpeedDialIcon\";\r\nimport SpeedDialAction from \"@material-ui/lab/SpeedDialAction\";\r\nimport FileCopyIcon from \"@material-ui/icons/FileCopyOutlined\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport PrintIcon from \"@material-ui/icons/Print\";\r\nimport ShareIcon from \"@material-ui/icons/Share\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport InvertColors from \"@material-ui/icons/InvertColors\";\r\n\r\nconst canvasWidth = 1080 * 3;\r\nconst canvasHeight = 1080 * 3;\r\n\r\ninterface WhiteProps {}\r\n\r\nconst useCanvasCtx = (): [\r\n  (canvas: HTMLCanvasElement) => void,\r\n  React.MutableRefObject<CanvasRenderingContext2D | null>,\r\n  ClientRect\r\n] => {\r\n  const [rect, setRect] = useState<ClientRect>();\r\n  const ctxRef = useRef<CanvasRenderingContext2D | null>(null);\r\n  const ref = useCallback((canvas: HTMLCanvasElement) => {\r\n    setRect(canvas.getBoundingClientRect());\r\n    ctxRef.current = canvas.getContext(\"2d\");\r\n  }, []);\r\n  return [ref, ctxRef, rect as ClientRect];\r\n};\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: \"100%\",\r\n    height: \"100vh\",\r\n    display: \"block\",\r\n    touchAction: \"none\"\r\n  },\r\n  speedDial: {\r\n    position: \"absolute\",\r\n    bottom: theme.spacing(2),\r\n    right: theme.spacing(3)\r\n  }\r\n}));\r\n\r\ninterface DrawPoint {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ntype CtxStyle = string | CanvasGradient | CanvasPattern;\r\ninterface Draw {\r\n  style: CtxStyle;\r\n  points: DrawPoint[];\r\n}\r\ntype Draws = Draw[];\r\n\r\nconst event2Point = (event: MouseEvent | TouchEvent): DrawPoint => {\r\n  const point = {\r\n    x: 0,\r\n    y: 0\r\n  };\r\n  let value: Touch | MouseEvent;\r\n  switch (event.type) {\r\n    case \"touchstart\":\r\n    case \"touchmove\":\r\n    case \"touchend\":\r\n      value = (event as TouchEvent).changedTouches[0];\r\n      break;\r\n    case \"mousedown\":\r\n    case \"mousemove\":\r\n    case \"mouseup\":\r\n      value = event as MouseEvent;\r\n      break;\r\n    default:\r\n      value = event as MouseEvent;\r\n      break;\r\n  }\r\n\r\n  point.x = value.clientX;\r\n  point.y = value.clientY;\r\n  return point;\r\n};\r\nlet drawing = false;\r\nconst draw = (\r\n  startHandler: (p: DrawPoint) => void,\r\n  moveHandler: (p: DrawPoint) => void,\r\n  stopHandler?: (p: DrawPoint) => void\r\n) => {\r\n  const start = (event: MouseEvent | TouchEvent) => {\r\n    drawing = true;\r\n    startHandler(event2Point(event));\r\n  };\r\n  const move = (event: MouseEvent | TouchEvent) => {\r\n    if (drawing) {\r\n      event.stopPropagation();\r\n      moveHandler(event2Point(event));\r\n    }\r\n  };\r\n  const stop = (event: MouseEvent | TouchEvent) => {\r\n    drawing = false;\r\n    stopHandler && stopHandler(event2Point(event));\r\n  };\r\n  return { start, move, stop };\r\n};\r\n\r\nconst drawLineHandler = (ctx: CanvasRenderingContext2D, draw: Draw) => {\r\n  ctx.strokeStyle = draw.style;\r\n  ctx.lineWidth = 15;\r\n  ctx.beginPath();\r\n  ctx.moveTo(draw.points[0].x, draw.points[0].y);\r\n  draw.points.forEach(line => {\r\n    ctx.lineTo(line.x, line.y);\r\n  });\r\n  ctx.stroke();\r\n};\r\n\r\nconst White: React.FC<WhiteProps> = props => {\r\n  const classes = useStyles();\r\n  console.log(\"run function components\");\r\n\r\n  const [ref, ctxRef, rect] = useCanvasCtx();\r\n  const [style, setStyle] = useState<CtxStyle>(\"\");\r\n  const [dialOpen, setDialOpen] = useState<boolean>(false);\r\n  const drawsRef = useRef<Draws>([]);\r\n  const colorRef = useRef<HTMLInputElement>(null);\r\n\r\n\r\n  const drawHandler = useCallback((line: Draw) => {\r\n    const ctx = ctxRef.current as CanvasRenderingContext2D;\r\n    drawLineHandler(ctx, line);\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   console.log('useEffect')\r\n  //   const ctx = ctxRef.current as CanvasRenderingContext2D;\r\n  //   ctx.clearRect(0,0,canvasWidth, canvasHeight)\r\n  //   drawsRef.current.forEach(drawHandler)\r\n  // });\r\n\r\n  const setCurrentPoint = (p: DrawPoint) => {\r\n    const current = drawsRef.current[drawsRef.current.length - 1];\r\n    const point: DrawPoint = {\r\n      x: Math.round(((p.x - rect.left) * canvasWidth) / rect.width),\r\n      y: Math.round(((p.y - rect.top) * canvasHeight) / rect.height)\r\n    };\r\n    current.points.push(point);\r\n    drawHandler(current);\r\n  };\r\n\r\n  const moveHandlerThrottle = throttle(point => setCurrentPoint(point), 16);\r\n\r\n  const drawLine = draw(\r\n    point => {\r\n      drawsRef.current.push({ style, points: [] });\r\n      moveHandlerThrottle(point);\r\n    },\r\n    point => {\r\n      moveHandlerThrottle(point);\r\n    }\r\n  );\r\n\r\n  const actions = [\r\n    // { icon: <SaveIcon />, name: \"Save\" },\r\n    // { icon: <PrintIcon />, name: \"Print\" },\r\n    // { icon: <ShareIcon />, name: \"Share\" },\r\n    // { icon: <DeleteIcon />, name: \"Delete\" },\r\n    {\r\n      icon: <InvertColors />, \r\n      name: \"color\",\r\n      hanler() {\r\n        (colorRef.current as HTMLInputElement).click()\r\n        setDialOpen(false)\r\n      }\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <canvas\r\n        className={classes.root}\r\n        ref={ref}\r\n        height={canvasHeight}\r\n        width={canvasWidth}\r\n        onMouseDown={drawLine.start}\r\n        onMouseMove={drawLine.move}\r\n        onMouseUp={drawLine.stop}\r\n        onTouchStart={drawLine.start}\r\n        onTouchMove={drawLine.move}\r\n        onTouchEnd={drawLine.stop}\r\n        // onPointerDown={drawLine.start}\r\n        // onPointerMove={drawLine.move}\r\n        // onPointerUp={drawLine.stop}\r\n      />\r\n      <SpeedDial\r\n        ariaLabel=\"SpeedDial\"\r\n        className={classes.speedDial}\r\n        // hidden={dialOpen}\r\n        icon={<SpeedDialIcon />}\r\n        onClick={() => setDialOpen(o=>!o)}\r\n        onBlur={() => setDialOpen(false)}\r\n        onClose={() => setDialOpen(false)}\r\n        onFocus={() => setDialOpen(true)}\r\n        onMouseEnter={() => setDialOpen(true)}\r\n        onMouseLeave={() => setDialOpen(false)}\r\n        open={dialOpen}\r\n        // direction={direction}\r\n      >\r\n        {actions.map(action => (\r\n          <SpeedDialAction\r\n            key={action.name}\r\n            icon={action.icon}\r\n            tooltipTitle={action.name}\r\n            onClick={action.hanler || console.log}\r\n          />\r\n        ))}\r\n      </SpeedDial>\r\n      <input\r\n        ref={colorRef}\r\n        type=\"color\"\r\n        hidden\r\n        onChange={e => setStyle(e.target.value)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default White;\r\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n// import 'normalize.css';\nimport './App.css';\nimport White from './components/White';\n\nconst App: React.FC = () => {\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <div className=\"App\">\n        <White />\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import './bootstrap';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nconst serviceConfig = {\n  onSuccess: (registration: ServiceWorkerRegistration)=> {\n    console.log('onSuccess', registration)\n  },\n  onUpdate: (registration: ServiceWorkerRegistration) => {\n    console.log('onUpdate', registration)\n  }\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register(serviceConfig);\n// navigator.serviceWorker.ready.then(registration=> {\n//   // registration.addEventListener()\n//   console.log(registration)\n// })"],"sourceRoot":""}