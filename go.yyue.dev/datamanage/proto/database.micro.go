// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: datamanage/database.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	message "go.yyue.dev/common/message"
	_ "go.yyue.dev/crawler/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for DatabaseService service

type DatabaseService interface {
	Connect(ctx context.Context, in *ConnectRequest, opts ...client.CallOption) (*message.Message, error)
	InsertHouseSummary(ctx context.Context, in *InsertHouseSummaryRequest, opts ...client.CallOption) (*message.Message, error)
	InsertHouse(ctx context.Context, in *InsertHouseRequest, opts ...client.CallOption) (*message.Message, error)
}

type databaseService struct {
	c    client.Client
	name string
}

func NewDatabaseService(name string, c client.Client) DatabaseService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "database"
	}
	return &databaseService{
		c:    c,
		name: name,
	}
}

func (c *databaseService) Connect(ctx context.Context, in *ConnectRequest, opts ...client.CallOption) (*message.Message, error) {
	req := c.c.NewRequest(c.name, "DatabaseService.Connect", in)
	out := new(message.Message)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseService) InsertHouseSummary(ctx context.Context, in *InsertHouseSummaryRequest, opts ...client.CallOption) (*message.Message, error) {
	req := c.c.NewRequest(c.name, "DatabaseService.InsertHouseSummary", in)
	out := new(message.Message)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseService) InsertHouse(ctx context.Context, in *InsertHouseRequest, opts ...client.CallOption) (*message.Message, error) {
	req := c.c.NewRequest(c.name, "DatabaseService.InsertHouse", in)
	out := new(message.Message)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DatabaseService service

type DatabaseServiceHandler interface {
	Connect(context.Context, *ConnectRequest, *message.Message) error
	InsertHouseSummary(context.Context, *InsertHouseSummaryRequest, *message.Message) error
	InsertHouse(context.Context, *InsertHouseRequest, *message.Message) error
}

func RegisterDatabaseServiceHandler(s server.Server, hdlr DatabaseServiceHandler, opts ...server.HandlerOption) error {
	type databaseService interface {
		Connect(ctx context.Context, in *ConnectRequest, out *message.Message) error
		InsertHouseSummary(ctx context.Context, in *InsertHouseSummaryRequest, out *message.Message) error
		InsertHouse(ctx context.Context, in *InsertHouseRequest, out *message.Message) error
	}
	type DatabaseService struct {
		databaseService
	}
	h := &databaseServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DatabaseService{h}, opts...))
}

type databaseServiceHandler struct {
	DatabaseServiceHandler
}

func (h *databaseServiceHandler) Connect(ctx context.Context, in *ConnectRequest, out *message.Message) error {
	return h.DatabaseServiceHandler.Connect(ctx, in, out)
}

func (h *databaseServiceHandler) InsertHouseSummary(ctx context.Context, in *InsertHouseSummaryRequest, out *message.Message) error {
	return h.DatabaseServiceHandler.InsertHouseSummary(ctx, in, out)
}

func (h *databaseServiceHandler) InsertHouse(ctx context.Context, in *InsertHouseRequest, out *message.Message) error {
	return h.DatabaseServiceHandler.InsertHouse(ctx, in, out)
}
