// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user/user.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	message "go.yyue.dev/common/message"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for SMSService service

type SMSService interface {
	Send(ctx context.Context, in *SendRequest, opts ...client.CallOption) (*message.Message, error)
	Validate(ctx context.Context, in *ValidateRequest, opts ...client.CallOption) (*message.Message, error)
}

type sMSService struct {
	c    client.Client
	name string
}

func NewSMSService(name string, c client.Client) SMSService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "user"
	}
	return &sMSService{
		c:    c,
		name: name,
	}
}

func (c *sMSService) Send(ctx context.Context, in *SendRequest, opts ...client.CallOption) (*message.Message, error) {
	req := c.c.NewRequest(c.name, "SMSService.Send", in)
	out := new(message.Message)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sMSService) Validate(ctx context.Context, in *ValidateRequest, opts ...client.CallOption) (*message.Message, error) {
	req := c.c.NewRequest(c.name, "SMSService.Validate", in)
	out := new(message.Message)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SMSService service

type SMSServiceHandler interface {
	Send(context.Context, *SendRequest, *message.Message) error
	Validate(context.Context, *ValidateRequest, *message.Message) error
}

func RegisterSMSServiceHandler(s server.Server, hdlr SMSServiceHandler, opts ...server.HandlerOption) error {
	type sMSService interface {
		Send(ctx context.Context, in *SendRequest, out *message.Message) error
		Validate(ctx context.Context, in *ValidateRequest, out *message.Message) error
	}
	type SMSService struct {
		sMSService
	}
	h := &sMSServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SMSService{h}, opts...))
}

type sMSServiceHandler struct {
	SMSServiceHandler
}

func (h *sMSServiceHandler) Send(ctx context.Context, in *SendRequest, out *message.Message) error {
	return h.SMSServiceHandler.Send(ctx, in, out)
}

func (h *sMSServiceHandler) Validate(ctx context.Context, in *ValidateRequest, out *message.Message) error {
	return h.SMSServiceHandler.Validate(ctx, in, out)
}

// Client API for UserService service

type UserService interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*message.Message, error)
	Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*UserInfo, error)
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...client.CallOption) (*UserInfo, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "user"
	}
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*message.Message, error) {
	req := c.c.NewRequest(c.name, "UserService.Register", in)
	out := new(message.Message)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*UserInfo, error) {
	req := c.c.NewRequest(c.name, "UserService.Login", in)
	out := new(UserInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...client.CallOption) (*UserInfo, error) {
	req := c.c.NewRequest(c.name, "UserService.GetInfo", in)
	out := new(UserInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	Register(context.Context, *RegisterRequest, *message.Message) error
	Login(context.Context, *LoginRequest, *UserInfo) error
	GetInfo(context.Context, *GetInfoRequest, *UserInfo) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		Register(ctx context.Context, in *RegisterRequest, out *message.Message) error
		Login(ctx context.Context, in *LoginRequest, out *UserInfo) error
		GetInfo(ctx context.Context, in *GetInfoRequest, out *UserInfo) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) Register(ctx context.Context, in *RegisterRequest, out *message.Message) error {
	return h.UserServiceHandler.Register(ctx, in, out)
}

func (h *userServiceHandler) Login(ctx context.Context, in *LoginRequest, out *UserInfo) error {
	return h.UserServiceHandler.Login(ctx, in, out)
}

func (h *userServiceHandler) GetInfo(ctx context.Context, in *GetInfoRequest, out *UserInfo) error {
	return h.UserServiceHandler.GetInfo(ctx, in, out)
}
